import android.content.Context
import android.content.res.Resources
import android.graphics.Canvas
import android.graphics.Color
import android.graphics.Paint
import android.graphics.Rect
import android.text.Layout
import android.text.Spannable
import android.text.SpannableString
import android.text.StaticLayout
import android.text.TextPaint
import android.text.style.ForegroundColorSpan
import android.util.AttributeSet
import android.util.Log
import android.view.View

class Timer @JvmOverloads constructor(
    context: Context,
    attrs: AttributeSet? = null,
    defStyleAttr: Int = 0,
    defStyleRes: Int = 0
) : View(context, attrs, defStyleAttr, defStyleRes) {
    var isFirstDraw = true
    var stringTest = "123456789101112131415161718192021222324252627282930"
    var actualHeight = 0
    var isExpanding = false
    private var onClickCallback: (() -> Unit)? = null

    fun onClick() {
        isExpanding = !isExpanding
        invalidate()
    }

    fun setOnClickCallback(callback: () -> Unit) {
        onClickCallback = callback
    }

    val textPaint = TextPaint().apply {
        textSize = 24.sp
        color = Color.BLACK
    }
    var viewHeight = getTextHeight(stringTest, textPaint)

    fun getTextHeight(text: String, paint: Paint) = Rect().run {
        paint.getTextBounds(text, 0, text.length, this)
        height()
    }

    override fun onMeasure(widthMeasureSpec: Int, heightMeasureSpec: Int) {
        setMeasuredDimension(widthMeasureSpec, if (isFirstDraw) heightMeasureSpec else viewHeight)
    }

    override fun onDraw(canvas: Canvas) {
        val bound = canvas.clipBounds
        var tempPos = 0
        val textBound = Rect()
        val showAllText = "...Show more"
        val showAllTextBound = Rect()
        var tempWidth = 0
        textPaint.getTextBounds(showAllText, 0, showAllText.length, showAllTextBound)
        while (tempWidth + showAllTextBound.width() < bound.width()) {
            val tempStr = stringTest.substring(0, ++tempPos)
            textPaint.getTextBounds(tempStr, 0, tempStr.length, textBound)
            tempWidth = textBound.width()
        }
        val collapsedString = stringTest.substring(0, tempPos - 1) + showAllText
        val sb = SpannableString(collapsedString)
        sb.setSpan(
            ForegroundColorSpan(Color.BLUE),
            tempPos - 1,
            collapsedString.length,
            Spannable.SPAN_EXCLUSIVE_EXCLUSIVE
        )
        val staticLayout =
            StaticLayout.Builder.obtain(stringTest, 0, stringTest.length, textPaint, bound.width())
                .setAlignment(Layout.Alignment.ALIGN_NORMAL)
                .setLineSpacing(0f, 1f)
                .setIncludePad(false)
                .build()
        val lineCount = staticLayout.lineCount
        val textHeight = getTextHeight(collapsedString, textPaint)
        val textX = bound.left.toFloat()
        if (isFirstDraw) {
            canvas.save()
            canvas.translate(textX, 0f)
            staticLayout.draw(canvas)
            canvas.restore()
            actualHeight = staticLayout.height
            isFirstDraw = false
            invalidate()
        } else {
            if (!isExpanding) {
                canvas.drawText(sb.toString(), 0f, textHeight.toFloat(), textPaint)
                viewHeight = textHeight
                requestLayout()
            } else {
                canvas.save()
                canvas.translate(textX, 0f)
                staticLayout.draw(canvas)
                canvas.restore()
                viewHeight = actualHeight
                requestLayout()
            }
        }
        Log.d("CHOTAOTEST", "line count: ${lineCount}")
    }
}

val Int.dp: Float
    get() = (this * Resources.getSystem().displayMetrics.density + 0.5f)

val Int.sp: Float
    get() = (this * Resources.getSystem().displayMetrics.scaledDensity)
