package com.example.customview

import android.content.Context
import android.graphics.Canvas
import android.graphics.Color
import android.graphics.Paint
import android.graphics.Rect
import android.text.Layout
import android.text.StaticLayout
import android.text.TextPaint
import android.util.AttributeSet
import android.view.View

class ExpandableTextView @JvmOverloads constructor(
    context: Context,
    attrs: AttributeSet? = null,
    defStyleAttr: Int = 0,
    defStyleRes: Int = 0
) : View(context, attrs, defStyleAttr, defStyleRes) {
    var isFirstDraw = true
    var stringTest = "123456789101112131415161718192021222324252627282930"
    var actualHeight = 0
    var isExpanding = false
    private var onClickCallback: (() -> Unit)? = null
    val textPaint = TextPaint().apply {
        textSize = 20.sp
        color = Color.BLACK
    }

    fun setTextSize(size: Int) {
        textPaint.textSize = size.sp
        isFirstDraw = true
        invalidate()
    }

    var viewHeight = 0

    fun onClick() {
        isExpanding = !isExpanding
        invalidate()
    }

    fun getTextHeight(text: String, paint: Paint) = Rect().run {
        paint.getTextBounds(text, 0, text.length, this)
        height()
    }

    override fun onMeasure(widthMeasureSpec: Int, heightMeasureSpec: Int) {
        setMeasuredDimension(widthMeasureSpec, if (isFirstDraw) heightMeasureSpec else viewHeight)
    }

    fun getStaticLayout(text: String, boundWidth: Int) =
        StaticLayout.Builder.obtain(text, 0, text.length, textPaint, boundWidth)
            .setAlignment(Layout.Alignment.ALIGN_NORMAL)
            .setLineSpacing(0f, 1f)
            .setIncludePad(false)
            .build()

    override fun onDraw(canvas: Canvas) {
        super.onDraw(canvas)
        val bound = canvas.clipBounds
        var tempPos = 0
        val textBound = Rect()
        val showAllText = "...Show more"
        val showAllTextBound = Rect()
        textPaint.getTextBounds(showAllText, 0, showAllText.length, showAllTextBound)
        while (textBound.width() + showAllTextBound.width() < bound.width()) {
            val tempStr = stringTest.substring(0, ++tempPos)
            textPaint.getTextBounds(tempStr, 0, tempStr.length, textBound)
        }
        stringTest.substring(0, tempPos - 1).also {
            textPaint.getTextBounds(it, 0, it.length, textBound)
        }
        val collapsedString = stringTest.substring(0, tempPos - 1) + showAllText
        val staticLayout = getStaticLayout(stringTest, bound.width())
        if (isFirstDraw) {
            staticLayout.draw(canvas)
            actualHeight = staticLayout.height
            isFirstDraw = false
            invalidate()
        } else {
            if (!isExpanding) {
                var additionalWidth = 0
                var sl: StaticLayout
                while (getStaticLayout(collapsedString, bound.width() + additionalWidth).let {
                        sl = it
                        it.lineCount > 1
                    }) {
                    additionalWidth++
                }
                sl.apply {
                    viewHeight = height
                    draw(canvas)
                }
                requestLayout()
            } else {
                staticLayout.draw(canvas)
                viewHeight = actualHeight
                requestLayout()
            }
        }
    }
}
